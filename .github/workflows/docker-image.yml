name: Docker Image CD

on:
  push:
    branches: [ "main" ]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PUBLIC_TOKEN }}
          submodules: true
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Setup Java JDK
        uses: actions/setup-java@v1.4.4
        with:
          java-version: 17
      - name: Build the server
        run:
          ./gradlew build
      - uses: actions/upload-artifact@v2
        with:
          name: jar
          path: ./build/libs/*-SNAPSHOT.jar
  deploy_dockerhub:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - id: commit
        uses: pr-mpt/actions-commit-hash@v2
      - uses: actions/download-artifact@v2
        with:
          name: jar
          path: ./build/libs
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_HUB_USERNAME}}
          password: ${{secrets.DOCKER_HUB_PASSWORD}}
      - name: Build and push
        env:
          TAG: ${{ env.GITHUB_SHA }}
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{secrets.DOCKER_HUB_USERNAME}}/${{ vars.REPOSITORY_NAME }}:${{ steps.commit.outputs.short }}
  deploy_aws:
    runs-on: ubuntu-latest
    needs: deploy_dockerhub
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      - name: AWS Secrets Manager GitHub Action
        uses: aws-actions/aws-secretsmanager-get-secrets@v1.0.4
        with:
          secret-ids: esc/config/task_definition
      - name: task definition to file
        run: |
          echo '${{ env.ESC_CONFIG_TASK_DEFINITION }}' >> task_definition.json
      - name: Amazon ECS "Deploy Task Definition" Action for GitHub Actions
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task_definition.json
          service: ${{ vars.SERVICE_NAME }}
          cluster: ${{ vars.CLUSTER_NAME }}
          wait-for-service-stability: true
          wait-for-minutes: 10
